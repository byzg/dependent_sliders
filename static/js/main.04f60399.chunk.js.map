{"version":3,"sources":["actions/items.ts","reducers/items.ts","reducers/index.ts","store/configureStore.ts","components/Items/styled/Item.ts","components/Items/Item.tsx","components/Items/index.ts","components/Items/Items.tsx","containers/ItemsContainer.ts","components/App/styled/index.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["RECEIVE_ITEMS_ACTION_TYPES","RECEIVE_ITEMS_SUCCESS","initialState","items","state","arguments","length","undefined","action","type","payload","data","rootReducer","combineReducers","configureStore","createStore","composeWithDevTools","applyMiddleware","multiClientMiddleware","default","client","axios","create","transformRequest","defaults","concat","json","JSON","stringify","humps","decamelizeKeys","parse","transformResponse","camelizeKeys","paramsSerializer","params","qs","arrayFormat","Wrapper","styled","div","_templateObject","Name","_templateObject2","InputNumberStyled","InputNumber","_templateObject3","ItemComponent","separatorTyping","handleKeyDown","event","percent","_this","props","item","includes","key","Number","isInteger","formatter","value","_","round","parseFloat","parser","newValue","_this$props","max","parsed","match","join","handleChange","onChange","_this$props2","this","react_default","a","createElement","name","js_default","maxValue","minValue","onKeyDown","Component","Items","receive","count","receiveItems","then","setState","autocorrected","itemsExcept","difference","limitMaxForItem","maxBy","handleItemChange","index","nextItems","produce","draft","current","dependantIndex","indexOf","minBy","_this2","range","map","i","onClick","Item","sumBy","mapDispatchToProps","types","request","url","ItemsContainer","connect","_ref","styled_templateObject","App","styled_Wrapper","containers_ItemsContainer","Boolean","window","location","hostname","store","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04f60399.chunk.js","sourcesContent":["import { PreAction } from './index';\n\nexport const RECEIVE_ITEMS_ACTION_TYPES = [\n  'RECEIVE_ITEMS_REQUEST',\n  'RECEIVE_ITEMS_SUCCESS',\n];\n\nexport function receiveItems(count: number): PreAction {\n  return {\n    types: RECEIVE_ITEMS_ACTION_TYPES,\n    payload: {\n      request: {\n        url: `/items/${count}.json`,\n      },\n    },\n  };\n}\n","import { Action } from '../actions';\nimport { RECEIVE_ITEMS_ACTION_TYPES } from '../actions/items';\n\nconst [\n  ,\n  RECEIVE_ITEMS_SUCCESS,\n] = RECEIVE_ITEMS_ACTION_TYPES;\n\nexport interface Item {\n  name: string;\n  percent: number;\n}\n\nexport interface ItemsState extends Array<Item> {\n  [index: number]: Item;\n}\n\nconst initialState: ItemsState = [];\n\nfunction items(state = initialState, action: Action) {\n  switch (action.type) {\n    case RECEIVE_ITEMS_SUCCESS: {\n      return action.payload.data;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default items;\n","import { AnyAction, combineReducers } from 'redux';\n\nimport items, { ItemsState } from './items';\n\nexport interface ApplicationState {\n  items: ItemsState;\n}\n\nconst rootReducer = combineReducers({\n  items,\n} as any);\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport axios from 'axios';\n// @ts-ignore\nimport { multiClientMiddleware } from 'redux-axios-middleware';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport humps from 'humps';\nimport qs from 'qs';\n\nimport rootReducer from '../reducers';\n\nconst initialState = {};\n\nexport function configureStore(state = initialState) {\n  const paramsSerializer = (params: object) =>\n    qs.stringify(humps.decamelizeKeys(params), { arrayFormat: 'indices' });\n\n  return createStore(\n    rootReducer,\n    state,\n    composeWithDevTools(\n      applyMiddleware(\n        multiClientMiddleware({\n          default: {\n            client: axios.create({\n              // @ts-ignore\n              transformRequest: axios.defaults.transformRequest.concat((json: string) =>\n                JSON.stringify(humps.decamelizeKeys(JSON.parse(json || '{}'))),\n              ),\n              // @ts-ignore\n              transformResponse: axios.defaults.transformResponse.concat(\n                humps.camelizeKeys,\n              ),\n              paramsSerializer,\n            }),\n          },\n        }),\n      ),\n    ),\n  );\n}\n\nexport default configureStore;\n","import styled from 'styled-components';\n// @ts-ignore\nimport InputNumber from 'rc-input-number';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  margin: 3rem 1rem;\n`;\n\nexport const Name = styled.div`\n  margin: 0 2rem;\n`;\n\nexport const InputNumberStyled = styled(InputNumber)`\n  margin: 0 2rem;\n`;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport InputRange, { Range } from 'react-input-range';\n\nimport 'rc-input-number/assets/index.css';\nimport 'react-input-range/lib/css/index.css';\n\nimport { Item } from '../../reducers/items';\nimport { Wrapper, Name, InputNumberStyled } from './styled/Item';\n\ninterface Props {\n  item: Item;\n  max: number;\n  onChange: (value: number) => void;\n}\n\nclass ItemComponent extends Component<Props> {\n  separatorTyping = '';\n\n  handleKeyDown = (event: React.KeyboardEvent) => {\n    const { item: { percent } } = this.props;\n    this.separatorTyping = [',', '.'].includes(event.key) && Number.isInteger(percent) ? '.' : '';\n  }\n\n  formatter = (value: number|string): string=> {\n    return `${_.round(parseFloat(value as string), 2)}${this.separatorTyping}`;\n  }\n\n  parser = (newValue: string): number=> {\n    const { item: { percent }, max } = this.props;\n    const parsed = parseFloat((newValue.match(/[\\d\\.]+/g) || []).join('')) || 0;\n    return parsed > max || parsed < 0 ? percent : parsed;\n  }\n\n  handleChange = (value: number | Range)=> {\n    this.props.onChange(_.round(value as number, 2));\n  }\n\n  render() {\n    const { item, max } = this.props;\n    return (\n      <Wrapper>\n        <Name>{item.name}</Name>\n        <InputRange\n          maxValue={_.round(max, 2)}\n          minValue={0}\n          value={parseFloat(this.formatter(item.percent))}\n          onChange={this.handleChange}\n        />\n        <InputNumberStyled\n          value={item.percent}\n          formatter={this.formatter}\n          parser={this.parser}\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default ItemComponent;\n","import Items from './Items';\n\nexport default Items;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport produce from 'immer';\n\nimport { Action, DispatchedAction } from '../../actions';\nimport { ItemsState, Item } from '../../reducers/items';\nimport ItemComponent from './Item';\n\ninterface Props {\n  items: ItemsState;\n  receiveItems: DispatchedAction;\n}\n\ninterface State {\n  items: ItemsState;\n}\n\nexport const MAX_SUM = 100;\n\nclass Items extends Component<Props, State> {\n  state = { items: this.props.items };\n\n  componentDidMount() {\n    this.receive(2)();\n  }\n\n  receive = (count: number)=> ()=> {\n    (this.props.receiveItems(count) as Promise<Action>).then(() => {\n      this.setState(this.autocorrected);\n    });\n  }\n\n  get autocorrected() {\n    const { items } = this.props;\n    const difference = MAX_SUM - _.sumBy(items, 'percent');\n    const nextItems = produce(items, (draft) => {\n      if (items.length > 1) {\n        const willChanged = (difference > 0 ? _.minBy : _.maxBy)(items, 'percent');\n        (willChanged as Item).percent += difference;\n      }\n    });\n    return { items: nextItems };\n  }\n\n  itemsExcept = (item: Item): ItemsState => {\n    const { items } = this.state;\n    return _.difference(items, [item]);\n  }\n\n  limitMaxForItem = (item: Item) => {\n    return this.props.items.length === 1 ?\n      100 :\n      (_.maxBy(this.itemsExcept(item), 'percent') as Item).percent + item.percent;\n  }\n\n  handleItemChange = (index: number) => (percent: number) => {\n    const { items } = this.state;\n    const nextItems = produce(items, (draft) => {\n      draft[index].percent = percent;\n      if (items.length > 1) {\n        const current = items[index];\n        const difference = percent - current.percent;\n        const dependantIndex = items.indexOf(\n          (difference > 0 ? _.maxBy : _.minBy)(\n            this.itemsExcept(current), 'percent',\n          ) || items[0],\n        );\n        draft[dependantIndex].percent -= difference;\n        draft[dependantIndex].percent = _.round(draft[dependantIndex].percent, 2);\n      }\n    });\n    this.setState({ items: nextItems });\n  }\n\n  render() {\n    const { items } = this.state;\n    if (!items) { return null; }\n    return (\n      <div>\n        <div>\n          {_.range(1, 6).map((i: number) => {\n            return <button key={i} onClick={this.receive(i)}>{i} item</button>;\n          })}\n        </div>\n        { items.map((item, index) => {\n          return <ItemComponent\n            key={index}\n            item={item}\n            max={this.limitMaxForItem(item)}\n            onChange={this.handleItemChange(index)}\n          />;\n        })}\n        <div>\n          Результат:\n          {items.map((item, index) => {\n            return <div key={index}>{item.name}: {item.percent}%</div>;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import { connect } from 'react-redux';\n\nimport Items from '../components/Items';\nimport { ApplicationState } from '../reducers';\nimport { receiveItems } from '../actions/items';\n\nconst mapStateToProps = ({ items }: ApplicationState) => ({\n  items,\n});\n\nconst mapDispatchToProps = {\n  receiveItems,\n};\n\nconst ItemsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Items);\n\nexport default ItemsContainer;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 1rem;\n`;\n","import React, { Component } from 'react';\n\nimport Items from '../../containers/ItemsContainer';\nimport { Wrapper } from './styled';\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Items />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport configureStore from './store/configureStore';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}